/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TeamMember } from "./TeamMember";
import { TeamMemberCountArgs } from "./TeamMemberCountArgs";
import { TeamMemberFindManyArgs } from "./TeamMemberFindManyArgs";
import { TeamMemberFindUniqueArgs } from "./TeamMemberFindUniqueArgs";
import { CreateTeamMemberArgs } from "./CreateTeamMemberArgs";
import { UpdateTeamMemberArgs } from "./UpdateTeamMemberArgs";
import { DeleteTeamMemberArgs } from "./DeleteTeamMemberArgs";
import { TeamMemberService } from "../teamMember.service";
@graphql.Resolver(() => TeamMember)
export class TeamMemberResolverBase {
  constructor(protected readonly service: TeamMemberService) {}

  async _teamMembersMeta(
    @graphql.Args() args: TeamMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TeamMember])
  async teamMembers(
    @graphql.Args() args: TeamMemberFindManyArgs
  ): Promise<TeamMember[]> {
    return this.service.teamMembers(args);
  }

  @graphql.Query(() => TeamMember, { nullable: true })
  async teamMember(
    @graphql.Args() args: TeamMemberFindUniqueArgs
  ): Promise<TeamMember | null> {
    const result = await this.service.teamMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TeamMember)
  async createTeamMember(
    @graphql.Args() args: CreateTeamMemberArgs
  ): Promise<TeamMember> {
    return await this.service.createTeamMember({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TeamMember)
  async updateTeamMember(
    @graphql.Args() args: UpdateTeamMemberArgs
  ): Promise<TeamMember | null> {
    try {
      return await this.service.updateTeamMember({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeamMember)
  async deleteTeamMember(
    @graphql.Args() args: DeleteTeamMemberArgs
  ): Promise<TeamMember | null> {
    try {
      return await this.service.deleteTeamMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
