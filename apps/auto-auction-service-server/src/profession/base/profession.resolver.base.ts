/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Profession } from "./Profession";
import { ProfessionCountArgs } from "./ProfessionCountArgs";
import { ProfessionFindManyArgs } from "./ProfessionFindManyArgs";
import { ProfessionFindUniqueArgs } from "./ProfessionFindUniqueArgs";
import { CreateProfessionArgs } from "./CreateProfessionArgs";
import { UpdateProfessionArgs } from "./UpdateProfessionArgs";
import { DeleteProfessionArgs } from "./DeleteProfessionArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { ProfessionService } from "../profession.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Profession)
export class ProfessionResolverBase {
  constructor(
    protected readonly service: ProfessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Profession",
    action: "read",
    possession: "any",
  })
  async _professionsMeta(
    @graphql.Args() args: ProfessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Profession])
  @nestAccessControl.UseRoles({
    resource: "Profession",
    action: "read",
    possession: "any",
  })
  async professions(
    @graphql.Args() args: ProfessionFindManyArgs
  ): Promise<Profession[]> {
    return this.service.professions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Profession, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Profession",
    action: "read",
    possession: "own",
  })
  async profession(
    @graphql.Args() args: ProfessionFindUniqueArgs
  ): Promise<Profession | null> {
    const result = await this.service.profession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Profession)
  @nestAccessControl.UseRoles({
    resource: "Profession",
    action: "create",
    possession: "any",
  })
  async createProfession(
    @graphql.Args() args: CreateProfessionArgs
  ): Promise<Profession> {
    return await this.service.createProfession({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Profession)
  @nestAccessControl.UseRoles({
    resource: "Profession",
    action: "update",
    possession: "any",
  })
  async updateProfession(
    @graphql.Args() args: UpdateProfessionArgs
  ): Promise<Profession | null> {
    try {
      return await this.service.updateProfession({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Profession)
  @nestAccessControl.UseRoles({
    resource: "Profession",
    action: "delete",
    possession: "any",
  })
  async deleteProfession(
    @graphql.Args() args: DeleteProfessionArgs
  ): Promise<Profession | null> {
    try {
      return await this.service.deleteProfession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: Profession,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
