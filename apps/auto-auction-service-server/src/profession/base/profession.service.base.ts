/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Profession as PrismaProfession,
  User as PrismaUser,
} from "@prisma/client";

export class ProfessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProfessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.profession.count(args);
  }

  async professions(
    args: Prisma.ProfessionFindManyArgs
  ): Promise<PrismaProfession[]> {
    return this.prisma.profession.findMany(args);
  }
  async profession(
    args: Prisma.ProfessionFindUniqueArgs
  ): Promise<PrismaProfession | null> {
    return this.prisma.profession.findUnique(args);
  }
  async createProfession(
    args: Prisma.ProfessionCreateArgs
  ): Promise<PrismaProfession> {
    return this.prisma.profession.create(args);
  }
  async updateProfession(
    args: Prisma.ProfessionUpdateArgs
  ): Promise<PrismaProfession> {
    return this.prisma.profession.update(args);
  }
  async deleteProfession(
    args: Prisma.ProfessionDeleteArgs
  ): Promise<PrismaProfession> {
    return this.prisma.profession.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.profession
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
